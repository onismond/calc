name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # ---------------- Linux builds ----------------
      - name: Install packaging tools (from binaries)
        if: matrix.os == 'ubuntu-latest'
        run: |
          set -eux

          # Install required dependencies
          sudo apt-get update
          sudo apt-get install -y curl xz-utils python3-pip rpm

          # Install cargo-deb binary directly from GitHub
          CARGO_DEB_VERSION="3.6.0"
          curl -L "https://github.com/mmstick/cargo-deb/releases/download/v${CARGO_DEB_VERSION}/cargo-deb-v${CARGO_DEB_VERSION}-x86_64-unknown-linux-gnu.tar.gz" \
            -o cargo-deb.tar.gz
          tar -xzf cargo-deb.tar.gz
          sudo mv cargo-deb /usr/local/bin/

          # Install cargo-rpm binary directly
          CARGO_RPM_VERSION="0.7.2"
          curl -L "https://github.com/iqlusioninc/cargo-rpm/releases/download/v${CARGO_RPM_VERSION}/cargo-rpm-v${CARGO_RPM_VERSION}-x86_64-unknown-linux-gnu.tar.gz" \
            -o cargo-rpm.tar.gz
          tar -xzf cargo-rpm.tar.gz
          sudo mv cargo-rpm /usr/local/bin/

          # Install Cloudsmith CLI
          pip install --upgrade cloudsmith-cli

      - name: Build .deb package
        if: matrix.os == 'ubuntu-latest'
        run: cargo deb

      - name: Build .rpm package
        if: matrix.os == 'ubuntu-latest'
        run: cargo rpm build

      - name: Upload .deb to Cloudsmith
        if: matrix.os == 'ubuntu-latest'
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          cloudsmith push deb onismond/calc/debian/any-distro target/debian/*.deb --version ${{ github.ref_name }}

      - name: Upload .rpm to Cloudsmith
        if: matrix.os == 'ubuntu-latest'
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          cloudsmith push rpm onismond/calc/el/any-distro target/release/rpmbuild/RPMS/x86_64/*.rpm --version ${{ github.ref_name }}
        continue-on-error: true

      # ---------------- Windows builds ----------------
      - name: Install Cloudsmith CLI
        if: matrix.os == 'windows-latest'
        timeout-minutes: 10
        run: |
          pip install --upgrade cloudsmith-cli

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        timeout-minutes: 10
        run: cargo build --release

      - name: Upload Windows exe to Cloudsmith
        if: matrix.os == 'windows-latest'
        timeout-minutes: 10
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          cloudsmith push raw onismond/calc target/release/calc.exe --version ${{ github.ref_name }}
        continue-on-error: true

      # ---------------- macOS builds ----------------
      - name: Build (macOS)
        if: matrix.os == 'macos-latest'
        run: cargo build --release

      - name: Install Cloudsmith CLI (macOS)
        if: matrix.os == 'macos-latest'
        run: pip install --upgrade cloudsmith-cli

      - name: Upload macOS binary to Cloudsmith
        if: matrix.os == 'macos-latest'
        env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
        run: |
          cloudsmith push raw onismond/calc target/release/calc --version ${{ github.ref_name }}
        continue-on-error: true
